Prepare for the C++ Theory test

***Pointer

https://www.youtube.com/watch?v=41kOpqSiDRE
Pointers in C++ (and most languages that support them) are passed by value:
Pointers Themselves: When you pass a pointer to a function, you're passing the address it holds by value. This means that the function gets a copy of the address, 
not the original pointer. 
If you modify the pointer inside the function (i.e., make it point somewhere else), the original pointer outside the function remains unchanged.
Data Pointed to by the Pointer: Since the function has a copy of the address that the pointer points to, it can directly access and modify the data at that address. 
Thus, when you dereference the pointer inside the function and modify the data, you're modifying the original data, not a copy of it.

Data is constant but the pointer is not. 
Pointer is constant but the data is not. (After that you can pointer for another varibale)
Data and pointer are constants.

WHEN THE POINTERS ARE USE
.Dynamic Memory Allocation:
Scenario: Consider an application like Microsoft Word or Google Docs. The text you enter into a document isn't of a fixed size; it grows and shrinks as you type or delete.
To manage this, such applications might allocate memory dynamically based on the text size, which is done using pointers in conjunction with memory management functions 
like new or malloc. Data Structures:
Scenario: Applications like web browsers keep track of which pages you've visited using a data structure called a stack. 
When you click the "back" button, the browser pops the URL off the stack. This kind of dynamic data structure is often implemented using pointers. 
Another structure is a linked list, used in scenarios where items need to be inserted or deleted frequently, like in certain types of database or list implementations.

.Function Callbacks:
Scenario: Imagine you're writing software for a robot. Different sensors on the robot trigger different actions. 
Instead of hard-coding a reaction for each sensor, you might use a function pointer. When a sensor is triggered, the appropriate function is "called back" using this pointer.
Arrays and Strings:
Scenario: Pointers can be used to iterate over arrays or strings more efficiently in certain cases, such as in embedded systems where performance is critical. Dynamic Libraries:
Scenario: Modern operating systems and applications use dynamic libraries (like .dll or .so files). When a program uses one of these libraries, it doesn't know the memory address of the functions it's calling ahead of time. 
Instead, it uses pointers to reference these functions once they're loaded into memory.

.Direct Memory Access:
Scenario: In embedded systems, hardware components are often accessed directly through specific memory addresses. Pointers are used to read from and write to these addresses.
Performance Optimization:
Scenario: In video games or graphics software, speed is crucial. Sometimes, to speed things up, developers will use pointers to access data directly,
avoiding the overhead of class methods or other abstractions. Custom Memory Management:
Scenario: In high-performance applications like databases or web servers, custom memory allocation schemes (like memory pools) can be
used to optimize memory usage patterns specific to those applications. Such custom schemes rely heavily on pointers. Interfacing with Other Languages:
Scenario: When writing software that interfaces with code written in another language (like C++ code calling a C library), 
pointers are often used to bridge the gap between the two languages. Buffer Handling in I/O Operations:
Scenario: Reading or writing files often involves using buffers, which are just blocks of memory. Pointers are used to manage and navigate these blocks of memory. 
In essence, anytime you need direct, fine-grained control over memory, or when performance is a significant concern, pointers become incredibly useful. 
However, with great power comes great responsibility. Incorrect use of pointers can lead to bugs, crashes, or security vulnerabilities, so it's essential to use them judiciously.


***Over-loading function


***Object-oriented Programming

Understanding object-oriented programming (OOP) is about thinking in terms of objects related to the problem domain. While procedural programming primarily deals with basic data types, OOP allows you to model real-world or abstract entities more effectively.
Consider you are creating software about pets. Using procedural methods, representing a cat merely with fundamental data types like int or string is impractical. A cat has attributes like age, color, breed, and behaviors like meow or purr. This is where OOP shines.
With OOP, you can define a class, say Cat, which serves as a blueprint for creating cat objects. This class can have variables for age, color, breed, and functions for actions like meowing.

Structure of OOP:
-Classes
-Objects
-Methods
-Attributes
Classes are particular data structur in other words a class is a block of code that defines a data type. The title of the class becomes the identifier for this new data type. When you create an instance of this data type, you're generating an object. By defining these custom classes, you have the capability to craft solutions that mirror the problem's context more closely. For instance, let's say you're working on software related to pets. Instead of relying solely on basic data types impractical as int or string, you can define a class called Cat. This Cat class would encapsulate attributes (like age, breed, or color) and behaviors (like meowing) specific to cats.
Object is an instance of a class. Think of it as a tangible representation of a blueprint (the class). While the class defines what attributes (data) and behaviors (methods) a cat should have, the object represents a specific cat with unique attributes and behaviors. Every object of the Cat class will possess its own set of member variables. This makes intuitive sense; without their distinct member variables, all Cat objects would be indistinguishable. e old years.
Attributes or properties of an object store the data that describes its state.
For the Cat class, typical attributes might include:
name: The cat's name.
color: The color of the cat.
Eyes: The color of the eyes of the cat.
Age: The age of the cat in years.
Number_of_legs: The number of legs of a cat
Breeds: The breed of the cat.
Methods (Behaviors):
Methods define what actions the object can perform or how it reacts to specific requests.
For the Cat class, typical methods might include:
meow(): Makes the cat meow.
purr(): Makes the cat purr.
scratch(): Makes the cat scratch something.

DECLARATION OF CLASS IN C++
The class declaration describes the type and scope of its member . In C++, a class is defined using a class-name, which is essentially an identifier that names the class. Within this class, you can include a variable number of member data and member functions, the quantity and nature of which are determined by the specific requirements of your program or application.

Within a class in C++, there are three types of access specifiers that dictate the accessibility of the class members (both data and functions) to other parts of your code. These access specifiers are:

Private: This specifier restricts access to the class members such that they can only be accessed within the class itself. Members declared as private cannot be accessed or modified directly by external functions or classes. This is often used for internal data or functions that are not intended to be exposed to the outside world, ensuring encapsulation and protection of the class's internal workings.

Public: The public access specifier allows class members to be accessed from any part of the program. That means any external function or class can directly use public members of a class. This is typically used for functions and data that are intended to be interfaced with by other parts of the program, such as an API or a set of public methods for interacting with an object.

Protected: This access specifier is somewhat of a middle ground between private and public. Protected members are inaccessible from outside the class, similar to private members. However, unlike private members, protected members can be accessed in derived classes (subclasses). This is useful when you want to allow a specific level of access for subclasses, enabling inheritance and polymorphic behaviors while still protecting certain aspects of the class from general access.

ACCESSING MEMBER OF CLASS
Data Hiding :

A class should hide it is internal data from the outside code and provide functions for accessing the data.

Accessing Private and Public Members Private Members: These are accessible only within the class and are typically used for data that should be hidden from external manipulation. Access to private data is usually provided through public member functions. For example, in the class CAT, private members like name, breeds, and age can only be accessed via member functions like getdata() and showdata().

Getters and Setters Getters and Setters: These are public member functions that allow controlled access to private members. A getter function retrieves the value of a private member, while a setter function sets or updates its value.

Public Members: These are accessible from any part of the program. For instance, you can access a public member function from the main() function using the syntax object-name.function-name(arguments);. Public members provide an interface through which the outside world can interact with the object.

Inheritance

Code Reuse: Inheritance allows a new class to take on properties and methods of an existing class without needing to rewrite those features. This promotes code reuse and simplifies maintenance.

Hierarchy: Inheritance creates a hierarchy of classes. The base class (or superclass) is at the top of the hierarchy, and derived classes (or subclasses) extend or specialize the base class.

Types of Inheritance:

Single Inheritance: Where a class inherits from only one parent class.
Multiple Inheritance (specific to some languages like C++): Where a class can inherit from more than one parent class.
Multilevel Inheritance: Where a class is derived from a class which is also a derived class.
Hierarchical Inheritance: Where multiple classes inherit from a single parent class.
Access Specifiers and Inheritance: The way properties and methods are inherited depends on their access specifiers (private, protected, public).

Private Members: Not accessible directly by the derived class.
Protected Members: Accessible within the derived class.
Public Members: Fully accessible in the derived class.
Constructors and Destructors: Special attention is needed for constructors and destructors in inheritance. Constructors of the base class are not inherited, but they are called when an object of the derived class is created. Destructors are called in the reverse order of the constructors when an object is destroyed.

Polymorphism and Inheritance: Inheritance allows polymorphism, where a derived class can override or extend the functionality of base class methods.

Protected members play a unique role in the object-oriented programming paradigm, particularly in the context of inheritance. They are similar to private members in that they cannot be accessed from outside the class, but they differ in that they can be accessed in derived (subclass) classes. This is a key concept in C++, allowing for more sophisticated and controlled data handling and method access within class hierarchies.

Key Characteristics of Protected Members:
Inheritance Access: While private members of a class are strictly confined to the class they are declared in, protected members can be accessed by classes that inherit from that class. This allows for more flexible code reuse and encapsulation.

Not Accessible from Outside the Class: Like private members, protected members are not accessible from outside the class unless through public member functions. This maintains encapsulation while allowing subclass-specific implementation.

Use in Class Hierarchies: The primary use of protected members is in situations where you have a class hierarchy and you want to make certain members available to derived classes, but not to the general public.

Advantages and Disadvantages of Inheritance Advantages:

Promotes code reuse.
Allows for the creation of a logical and intuitive class hierarchy.
Facilitates polymorphism, making code more flexible and dynamic.

Disadvantages:

Can lead to complex class hierarchies, making the code harder to navigate and maintain.
Increases the interdependency between classes, which might affect encapsulation and can lead to issues when modifying the code.

When to Use Protected Members: Protected members are most useful when you need to share certain properties or methods only within a family of related classes (i.e., a class hierarchy), but not with the rest of the program. This approach provides a balance between encapsulation and flexibility for class inheritance structures.

 